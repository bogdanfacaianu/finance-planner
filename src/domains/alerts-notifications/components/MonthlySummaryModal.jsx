import { useState, useEffect } from 'react'
import {
  Modal,
  Stack,
  Group,
  Text,
  Card,
  Badge,
  Progress,
  Title,
  Divider,
  Button,
  Alert,
  NumberFormatter,
  SimpleGrid,
  ActionIcon,
  Tooltip
} from '@mantine/core'
import {
  IconChartPie,
  IconTrendingUp,
  IconTrendingDown,
  IconAlertTriangle,
  IconCheck,
  IconX,
  IconCalendar,
  IconWallet,
  IconTarget,
  IconShare
} from '@tabler/icons-react'
import { notifications } from '@mantine/notifications'
import { alertService } from 'src/domains/alerts-notifications/services/AlertService'
import { AlertHelpers } from 'src/domains/alerts-notifications/types'

function MonthlySummaryModal({ opened, onClose, month, year, autoGenerate = false }) {
  const [summaryData, setSummaryData] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  useEffect(() => {
    if (opened && (month && year)) {
      if (autoGenerate) {
        generateSummary()
      } else {
        loadExistingSummary()
      }
    }
  }, [opened, month, year, autoGenerate])

  const generateSummary = async () => {
    setLoading(true)
    setError('')
    
    try {
      const { data, error } = await alertService.generateMonthlySummary(month, year)
      
      if (error) {
        setError(error)
        return
      }
      
      if (data && data.trigger_data) {
        setSummaryData(data.trigger_data)
        
        notifications.show({
          title: 'Monthly Summary Generated',
          message: 'Your monthly financial summary has been created',
          color: 'green',
          icon: <IconCheck size={16} />
        })
      }
    } catch (err) {
      setError('Failed to generate monthly summary')
    } finally {
      setLoading(false)
    }
  }

  const loadExistingSummary = async () => {
    setLoading(true)
    setError('')
    
    try {
      // Try to find existing summary alert for this month
      const { data: alerts } = await alertService.getAlerts({
        alert_type: 'monthly_summary'
      })
      
      if (alerts && alerts.length > 0) {
        // Find summary for the specific month/year
        const monthlyAlert = alerts.find(alert => 
          alert.trigger_data?.month === month && 
          alert.trigger_data?.year === year
        )
        
        if (monthlyAlert) {
          setSummaryData(monthlyAlert.trigger_data)
        } else {
          // No existing summary, generate new one
          await generateSummary()
        }
      } else {
        // No summaries exist, generate new one
        await generateSummary()
      }
    } catch (err) {
      setError('Failed to load monthly summary')
    } finally {
      setLoading(false)
    }
  }

  const getMonthName = () => {
    if (!month || !year) return ''
    return new Date(year, month - 1, 1).toLocaleString('en-GB', { 
      month: 'long',
      year: 'numeric'
    })
  }

  const getBudgetPercentage = () => {
    if (!summaryData || !summaryData.budget_total || summaryData.budget_total <= 0) return 0
    return Math.round((summaryData.total_spent / summaryData.budget_total) * 100)
  }

  const getSpendingTrend = () => {
    const percentage = getBudgetPercentage()
    if (percentage > 100) return { trend: 'over', color: 'red', icon: IconTrendingUp }
    if (percentage > 90) return { trend: 'high', color: 'orange', icon: IconTrendingUp }
    if (percentage < 70) return { trend: 'low', color: 'green', icon: IconTrendingDown }
    return { trend: 'normal', color: 'blue', icon: IconTrendingUp }
  }

  const handleShare = () => {
    if (!summaryData) return
    
    const summaryText = `${getMonthName()} Financial Summary:
    
Total Spent: ${AlertHelpers.formatCurrency(summaryData.total_spent)}
Budget: ${AlertHelpers.formatCurrency(summaryData.budget_total)}
Remaining: ${AlertHelpers.formatCurrency(summaryData.remaining_budget)}
Transactions: ${summaryData.expense_count}

Top Categories:
${summaryData.top_categories?.slice(0, 3).map(cat => 
  `• ${cat.category}: ${AlertHelpers.formatCurrency(cat.amount)}`
).join('\n')}

Generated by Financial Planner`

    if (navigator.share) {
      navigator.share({
        title: `${getMonthName()} Financial Summary`,
        text: summaryText
      })
    } else {
      navigator.clipboard.writeText(summaryText).then(() => {
        notifications.show({
          title: 'Copied to Clipboard',
          message: 'Monthly summary copied to clipboard',
          color: 'green'
        })
      })
    }
  }

  const spendingTrend = summaryData ? getSpendingTrend() : null

  return (
    <Modal
      opened={opened}
      onClose={onClose}
      title={
        <Group>
          <IconChartPie size={20} />
          <Text fw={500}>Monthly Financial Summary</Text>
        </Group>
      }
      size="lg"
      closeOnClickOutside={false}
    >
      <Stack gap="md">
        {error && (
          <Alert icon={<IconX size={16} />} color="red">
            {error}
          </Alert>
        )}

        {loading ? (
          <Alert icon={<IconCalendar size={16} />} color="blue">
            Generating your monthly summary...
          </Alert>
        ) : summaryData ? (
          <>
            {/* Header */}
            <Card withBorder p="md" bg="blue.0">
              <Group justify="space-between">
                <div>
                  <Title order={3}>{getMonthName()}</Title>
                  <Text size="sm" c="dimmed">Financial Overview</Text>
                </div>
                <Group>
                  {spendingTrend && (
                    <Badge 
                      color={spendingTrend.color} 
                      variant="light"
                      leftSection={<spendingTrend.icon size={12} />}
                    >
                      {getBudgetPercentage()}% of budget
                    </Badge>
                  )}
                  <Tooltip label="Share Summary">
                    <ActionIcon variant="light" onClick={handleShare}>
                      <IconShare size={16} />
                    </ActionIcon>
                  </Tooltip>
                </div>
              </Group>
            </Card>

            {/* Key Metrics */}
            <SimpleGrid cols={3} spacing="md">
              <Card withBorder p="md" bg="green.0">
                <Stack gap="xs" align="center">
                  <IconWallet size={24} color="green" />
                  <Text size="sm" c="dimmed" ta="center">Total Spent</Text>
                  <NumberFormatter 
                    value={summaryData.total_spent} 
                    prefix="£" 
                    fw={600}
                    size="lg"
                  />
                </Stack>
              </Card>

              <Card withBorder p="md" bg="blue.0">
                <Stack gap="xs" align="center">
                  <IconTarget size={24} color="blue" />
                  <Text size="sm" c="dimmed" ta="center">Budget Total</Text>
                  <NumberFormatter 
                    value={summaryData.budget_total} 
                    prefix="£" 
                    fw={600}
                    size="lg"
                  />
                </Stack>
              </Card>

              <Card withBorder p="md" bg={summaryData.remaining_budget >= 0 ? "teal.0" : "red.0"}>
                <Stack gap="xs" align="center">
                  {summaryData.remaining_budget >= 0 ? (
                    <IconCheck size={24} color="teal" />
                  ) : (
                    <IconAlertTriangle size={24} color="red" />
                  )}
                  <Text size="sm" c="dimmed" ta="center">
                    {summaryData.remaining_budget >= 0 ? 'Remaining' : 'Over Budget'}
                  </Text>
                  <NumberFormatter 
                    value={Math.abs(summaryData.remaining_budget)} 
                    prefix="£" 
                    fw={600}
                    size="lg"
                    style={{ 
                      color: summaryData.remaining_budget >= 0 ? 'green' : 'red' 
                    }}
                  />
                </Stack>
              </Card>
            </SimpleGrid>

            {/* Budget Progress */}
            <Card withBorder p="md">
              <Stack gap="sm">
                <Group justify="space-between">
                  <Text fw={500}>Budget Usage</Text>
                  <Text fw={500}>{getBudgetPercentage()}%</Text>
                </Group>
                <Progress 
                  value={Math.min(getBudgetPercentage(), 100)} 
                  color={spendingTrend?.color || 'blue'}
                  size="lg"
                  radius="md"
                />
                <Group justify="space-between">
                  <Text size="xs" c="dimmed">
                    {summaryData.expense_count} transactions
                  </Text>
                  <Text size="xs" c="dimmed">
                    {getBudgetPercentage() > 100 ? 'Over budget' : 'Within budget'}
                  </Text>
                </Group>
              </Stack>
            </Card>

            {/* Top Categories */}
            {summaryData.top_categories && summaryData.top_categories.length > 0 && (
              <Card withBorder p="md">
                <Stack gap="sm">
                  <Text fw={500}>Top Spending Categories</Text>
                  {summaryData.top_categories.slice(0, 5).map((category, index) => (
                    <Group key={index} justify="space-between">
                      <Group>
                        <Badge size="sm" variant="light">
                          #{index + 1}
                        </Badge>
                        <Text size="sm">{category.category}</Text>
                      </Group>
                      <NumberFormatter 
                        value={category.amount} 
                        prefix="£" 
                        fw={500}
                        size="sm"
                      />
                    </Group>
                  ))}
                </Stack>
              </Card>
            )}

            {/* Overspent Categories */}
            {summaryData.overspent_categories && summaryData.overspent_categories.length > 0 && (
              <Alert icon={<IconAlertTriangle size={16} />} color="red" variant="light">
                <Stack gap="xs">
                  <Text fw={500}>Categories Over Budget</Text>
                  {summaryData.overspent_categories.map((category, index) => (
                    <Group key={index} justify="space-between">
                      <Text size="sm">{category.category}</Text>
                      <Group gap="xs">
                        <NumberFormatter 
                          value={category.spent} 
                          prefix="£" 
                          size="sm"
                        />
                        <Text size="xs" c="dimmed">/</Text>
                        <NumberFormatter 
                          value={category.limit} 
                          prefix="£" 
                          size="sm"
                          c="dimmed"
                        />
                        <Badge color="red" size="xs">
                          +<NumberFormatter value={category.overage} prefix="£" />
                        </Badge>
                      </Group>
                    </Group>
                  ))}
                </Stack>
              </Alert>
            )}

            {/* Savings */}
            {summaryData.savings_this_month > 0 && (
              <Card withBorder p="md" bg="green.0">
                <Group>
                  <IconCheck size={20} color="green" />
                  <div>
                    <Text fw={500} c="green">Great job saving this month!</Text>
                    <Text size="sm" c="dimmed">
                      You saved <NumberFormatter value={summaryData.savings_this_month} prefix="£" fw={500} /> 
                      by staying under budget
                    </Text>
                  </div>
                </Group>
              </Card>
            )}
          </>
        ) : (
          <Alert icon={<IconCalendar size={16} />} color="blue">
            No summary data available. Click "Generate Summary" to create one.
          </Alert>
        )}

        {/* Actions */}
        <Group justify="space-between">
          <Button variant="light" onClick={onClose}>
            Close
          </Button>
          {!summaryData && !loading && (
            <Button onClick={generateSummary} loading={loading}>
              Generate Summary
            </Button>
          )}
        </Group>
      </Stack>
    </Modal>
  )
}

export default MonthlySummaryModal